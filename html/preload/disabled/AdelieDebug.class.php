<?php
/**
 * AdelieDebug - Powerful Debugger for XOOPSCube Legacy v2.3
 * Copyright 2011-2022 Suin
 *
 * AdelieDebug is distributed under the terms of the GPL2 license
 * For more information visit https://github.com/suin/xoops-adelie-debug
 * Do not remove this copyright message
 */
define('ADELIE_DEBUG_BUILD', true); define('ADELIE_DEBUG_BUILD_TIME', 1651946991); class AdelieDebug_Archive_ClassLoader { const DIRECTORY_SEPARATOR = '/'; protected $includePaths = array(); protected $namespaceSeparator = '_'; protected $fileExtension = '.php'; public function setIncludePath($includePath) { if ( in_array($includePath, $this->includePaths) === false ) { $this->includePaths[] = $includePath; } return $this; } public function getIncludePath() { return $this->includePaths; } public function setNamespaceSeparator($namespaceSeparator) { $this->namespaceSeparator = $namespaceSeparator; return $this; } public function getNamespaceSeparator() { return $this->namespaceSeparator; } public function setFileExtension($fileExtension) { $this->fileExtension = $fileExtension; return $this; } public function getFileExtension() { return $this->fileExtension; } public function register() { spl_autoload_register(array($this, 'loadClass')); return $this; } public function unregister() { spl_autoload_unregister(array($this, 'loadClass')); return $this; } public function loadClass($className) { if ( class_exists($className, false) === true ) { return; } if ( interface_exists($className, false) === true ) { return; } if ( function_exists('trait_exists') === true and trait_exists($className, false) === true ) { return; } if ( preg_match('/[a-zA-Z0-9_\\\]/', $className) == false ) { throw new InvalidArgumentException('Invalid class name was given: '.$className); } $classFile = str_replace($this->namespaceSeparator, self::DIRECTORY_SEPARATOR, $className); $classFile = $classFile.$this->fileExtension; foreach ( $this->includePaths as $includePath ) { if ( $includePath === ':eval:' ) { $classFile = '/'.$classFile; if ( array_key_exists($classFile, AdelieDebug_Archive::$archive) === true ) { eval(AdelieDebug_Archive::$archive[$classFile]); return true; } } else { $classPath = $includePath.self::DIRECTORY_SEPARATOR.$classFile; if ( file_exists($classPath) === true ) { require $classPath; return true; } } } return false; } } class AdelieDebug_Preload extends XCube_ActionFilter { protected $debugger = null; public function preFilter() { $this->_bootstrap(); $this->_setUp(); $this->_registerEventListeners(); } public function topAccessEventHandler() { if ( $this->_isAdelieDebugPage() === false ) { return; } $application = new AdelieDebug_Application(); $application->setUp(); $application->run(); $result = $application->getResult(); echo $result; die; } public function setupDebugEventHandler(&$instance, $debugMode) { $instance = new AdelieDebug_Debug_XoopsDebugger($this->debugger->logger); if ( $debugMode === XOOPS_DEBUG_SMARTY ) { $instance->enableDebugRenderSystem(); } $this->debugger->enableErrorReporting(); } public function addOutputFilterToXoopsTpl(Smarty $xoopsTpl) { if ( method_exists($xoopsTpl, 'registerFilter') === true ) { $xoopsTpl->registerFilter('output', array($this, 'filterSmartyOutput')); } else { $xoopsTpl->register_outputfilter(array($this, 'filterSmartyOutput')); } } protected function _bootstrap() { if ( defined('ADELIE_DEBUG_BUILD') === true ) { $classLoader = new AdelieDebug_Archive_ClassLoader(); $classLoader->setIncludePath(':eval:'); $classLoader->register(); } else { require_once dirname(__FILE__).'/Core/ClassLoader.php'; $classLoader = new AdelieDebug_Core_ClassLoader(); $classLoader->setIncludePath(dirname(dirname(__FILE__))); $classLoader->register(); } } protected function _setUp() { $this->debugger = new AdelieDebug_Debug_Main(); $this->debugger->run(); } protected function _registerEventListeners() { $this->mRoot->mDelegateManager->add('Legacypage.Top.Access', array($this, 'topAccessEventHandler'), 0); $this->mController->mSetupDebugger->add(array($this, 'setupDebugEventHandler'), 99999); $this->mRoot->mDelegateManager->add('XoopsTpl.New', array($this, 'addOutputFilterToXoopsTpl')); } protected function _isAdelieDebugPage() { return ( strpos($_SERVER['REQUEST_URI'], 'index.php/debug') !== false ); } public function filterSmartyOutput($output, $xoopsTpl) { $steps = debug_backtrace(); foreach ( $steps as $step ) { if ( $step['function'] === 'fetch' and $step['class'] === 'Smarty' and isset($step['args'][0]) === true ) { $this->debugger->logger->addView(sprintf('Render template: %s', $step['args'][0])); return $output; } } $this->debugger->logger->addView('Render a template, but template name is unknown...'); return $output; } } class AdelieDebug extends AdelieDebug_Preload { } class AdelieDebug_Archive { public static $archive = array ( '/AdelieDebug/Application.php' => 'class AdelieDebug_Application extends AdelieDebug_Core_Application { protected $pathinfo = null; public function setUp() { parent::setUp(); } public function setPathinfo($pathinfo) { $this->pathinfo = $pathinfo; } public function isBuild() { return defined(\'ADELIE_DEBUG_BUILD\'); } public function getBuildTime() { if ( defined(\'ADELIE_DEBUG_BUILD_TIME\') === true ) { return ADELIE_DEBUG_BUILD_TIME; } return false; } public function fileExists($filename) { if ( $this->isBuild() === true ) { $filename = \'/AdelieDebug\'.$filename; return array_key_exists($filename, AdelieDebug_Archive::$archive); } return file_exists(ADELIE_DEBUG_DIR.$filename); } public function fileGetContents($filename) { if ( $this->isBuild() === true ) { $filename = \'/AdelieDebug\'.$filename; return AdelieDebug_Archive::$archive[$filename]; } return file_get_contents(ADELIE_DEBUG_DIR.$filename); } protected function _setUpConfig() { if ( $this->isBuild() === false ) { parent::_setUpConfig(); return; } $this->config = eval(AdelieDebug_Archive::$archive[\'/AdelieDebug/Config/Config.ini\']); $this->config[\'render.class\'] = $this->config[\'render.class\'].\'OnBuild\'; } protected function _setUpRoutes() { if ( $this->isBuild() === false ) { parent::_setUpRoutes(); return; } $routes = eval(AdelieDebug_Archive::$archive[\'/AdelieDebug/Config/Route.ini\']); $this->router->setRoutes($routes); } protected function _resolve() { if ( $this->pathinfo === null ) { $this->pathinfo = $this->request->getPathinfo(); } $parameters = $this->router->resolve($this->pathinfo); if ( $parameters === false ) { throw new AdelieDebug_Exception_NotFoundException(\'Route not found: \'.$this->pathinfo); } $this->parameters = array_merge($this->parameters, $parameters); } }', '/AdelieDebug/Config/Config.ini' => 'return array ( \'render.class\' => \'AdelieDebug_Render_Smarty\', \'theme.name\' => \'AdelieDebug\', );', '/AdelieDebug/Config/Route.ini' => 'return array ( \'route\' => array ( \'prefix\' => \'/debug\', ), \'placeholders\' => array ( \':controller\' => \'[a-z0-9_]+\', \':action\' => \'[a-z0-9_]+\', \':year\' => \'[0-9]{4}\', \':month\' => \'[0-9]{2}\', \':day\' => \'[0-9]{2}\', \':id\' => \'[0-9]+\', ), \'/\' => array ( \'controller\' => \'top\', \'action\' => \'index\', ), \'/:controller\' => array ( \'action\' => \'index\', ), \'/:controller/:action\' => array ( ), \'/file/:filename\' => array ( \'controller\' => \'file\', \'action\' => \'index\', \':filename\' => \'[A-Za-z0-9_/\\\\.-]+\\\\.[A-Za-z0-9]{2,4}\', ), );', '/AdelieDebug/Controller/Console/Index.php' => 'class AdelieDebug_Controller_Console_Index extends AdelieDebug_Controller { public function run() { $this->_render(); } }', '/AdelieDebug/Controller/Console/LogList.php' => 'class AdelieDebug_Controller_Console_LogList extends AdelieDebug_Controller { public function run() { define(\'ADELIE_DEBUG_DISABLE_CONSOLE_LOG\', true); $files = glob(XOOPS_CACHE_PATH.\'/AdelieDebugLog*.json\'); if ( is_array($files) === false ) { } sort($files); $list = array(); foreach ( $files as $file ) { } } }', '/AdelieDebug/Controller/Error/InternalServerError.php' => 'class AdelieDebug_Controller_Error_InternalServerError extends AdelieDebug_Controller_Error { protected $statusCode = 500; protected $statusMessage = "500 Internal Server Error"; }', '/AdelieDebug/Controller/Error/NotFound.php' => 'class AdelieDebug_Controller_Error_NotFound extends AdelieDebug_Controller_Error { protected $statusCode = 404; protected $statusMessage = "404 Not Found"; }', '/AdelieDebug/Controller/Error.php' => 'abstract class AdelieDebug_Controller_Error extends AdelieDebug_Controller { protected $statusCode = 500; protected $statusMessage = "500 Internal Server Error"; public function run() { header(\'HTTP\', true, $this->statusCode); $this->output[\'statusCode\'] = $this->statusCode; $this->output[\'statusMessage\'] = $this->statusMessage; $this->output[\'exception\'] = $this->app->parameter(\'exception\'); $this->_render(); } }', '/AdelieDebug/Controller/File/Index.php' => 'class AdelieDebug_Controller_File_Index extends AdelieDebug_Controller { protected $mimetypes = array( \'css\' => \'text/css\', \'js\' => \'application/x-javascript\', \'png\' => \'image/png\', \'jpg\' => \'image/jpeg\', \'jpeg\' => \'image/jpeg\', \'gif\' => \'image/gif\', ); public function run() { $filename = \'/File/\'.$this->app->parameter(\'filename\'); if ( $this->app->fileExists($filename) === false ) { throw new AdelieDebug_Exception_NotFoundException("File not found: $filename"); } $extension = pathinfo($filename, PATHINFO_EXTENSION); $mimetype = $this->mimetypes[$extension]; $contents = $this->app->fileGetContents($filename); header(\'Content-Type: \'.$mimetype); echo $contents; die; } }', '/AdelieDebug/Controller/Report/Index.php' => 'class AdelieDebug_Controller_Report_Index extends AdelieDebug_Controller { protected $logger = null; public function setUp() { $this->_setUpLogger(); } public function run() { $this->_checkAccess(); if ( isset($_SESSION) === false ) { $_SESSION = array(); } $this->output[\'sentHeaders\'] = headers_list(); $this->output[\'requests\'] = array( \'$_GET\' => $_GET, \'$_POST\' => $_POST, \'$_SESSION\' => $_SESSION, \'$_COOKIE\' => $_COOKIE, \'$_FILES\' => $_FILES, \'$_SERVER\' => $_SERVER, ); $this->output[\'logs\'] = $this->_getLogs(); $this->output[\'errorSummary\'] = $this->logger->getErrorSummary(); $this->output[\'css\'] = $this->app->fileGetContents(\'/File/css/report.css\'); $this->output[\'js\'] = $this->app->fileGetContents(\'/File/js/report.js\'); $phpinfo = new AdelieDebug_Debug_PHPInfo(); $this->output[\'phpInfo\'] = $phpinfo->summary(); $this->_render(); } protected function _setUpLogger() { $this->logger = $this->app->parameter(\'logger\'); } protected function _checkAccess() { if ( $this->app->parameter(\'via\') === null ) { throw new RuntimeException("Unexpected access."); } } protected function _renderTheme($content) { return $content[\'content\']; } protected function _getLogs() { $logs = $this->logger->getLogs(); $last = end($logs); $lastTime = $last[\'time\']; foreach ( $logs as $key => $log ) { $time = $log[\'time\']; $timePer = ( $time / $lastTime ) * 100; $timeRate = ( $time * 800 ) / $lastTime; $logs[$key][\'timePer\'] = $timePer; $logs[$key][\'timeRate\'] = $timeRate; } return $logs; } }', '/AdelieDebug/Controller/Top/Index.php' => 'class AdelieDebug_Controller_Top_Index extends AdelieDebug_Controller { public function run() { $this->_render(); } }', '/AdelieDebug/Controller/User/Sudo.php' => 'class AdelieDebug_Controller_User_Sudo extends AdelieDebug_Controller { public function run() { if ( $this->app->request->isPost() === true ) { $this->_substitute(); } $this->output[\'nowUser\'] = $this->_getNowUser(); $this->output[\'users\'] = $this->_getUsers(); $this->_render(); } protected function _substitute() { if ( isset($_POST[\'uid\'][0]) === true ) { $this->_substituteByUserId(); } elseif ( isset($_POST[\'uname\'][0]) === true ) { $this->_substituteByUserName(); } } protected function _substituteByUserId() { $userId = (int) $_POST[\'uid\']; $userHandler =& xoops_getmodulehandler(\'users\', \'user\'); $cc = new CriteriaCompo(); $criteria =& $cc; $criteria->add(new Criteria(\'uid\', $userId)); $userModels =& $userHandler->getObjects($criteria); if ( count($userModels) !== 1 ) { throw new RuntimeException("User not found."); } if ( $userModels[0]->get(\'level\') == 0 ) { throw new RuntimeException("Unauthorized user."); } $handler =& xoops_gethandler(\'user\'); $user =& $handler->get($userModels[0]->get(\'uid\')); $this->_createSession($user); } protected function _substituteByUserName() { $userName = $_POST[\'uname\']; $userHandler =& xoops_getmodulehandler(\'users\', \'user\'); $cc = new CriteriaCompo(); $criteria =& $cc; $criteria->add(new Criteria(\'uname\', $userName)); $userModels =& $userHandler->getObjects($criteria); if ( count($userModels) !== 1 ) { throw new RuntimeException("User not found."); } if ( $userModels[0]->get(\'level\') == 0 ) { throw new RuntimeException("Unauthorized user."); } $handler =& xoops_gethandler(\'user\'); $user =& $handler->get($userModels[0]->get(\'uid\')); $this->_createSession($user); } protected function _createSession($xoopsUser) { $_SESSION = array(); $_SESSION[\'xoopsUserId\'] = $xoopsUser->get(\'uid\'); $_SESSION[\'xoopsUserGroups\'] = $xoopsUser->getGroups(); $url = $this->app->request->getUrl(); header(\'Location: \'.$url); die; } protected function _getNowUser() { global $xoopsUser; if ( is_object($xoopsUser) === false ) { return false; } $nowUser = array(); $nowUser[\'uid\'] = $xoopsUser->get(\'uid\'); $nowUser[\'name\'] = $xoopsUser->get(\'name\'); $nowUser[\'uname\'] = $xoopsUser->get(\'uname\'); return $nowUser; } protected function _getUsers() { $db = Database::getInstance(); $query = "SELECT uid, uname, name FROM %s WHERE level > 0 ORDER BY uid ASC"; $query = sprintf($query, $db->prefix(\'users\')); $result = $db->query($query); $users = array(); while ( $user = $db->fetchArray($result) ) { $users[] = $user; } return $users; } }', '/AdelieDebug/Controller.php' => 'abstract class AdelieDebug_Controller extends AdelieDebug_Core_Controller { protected function _getTemplateValues() { $root =& XCube_Root::getSingleton(); $isBuild = $this->app->isBuild(); return array_merge(parent::_getTemplateValues(), array( \'xoopsUrl\' => XOOPS_URL, \'isBuild\' => $isBuild, \'buildTime\' => $this->app->getBuildTime(), \'isAdmin\' => $root->mContext->mUser->isInRole(\'Site.Administrator\'), \'htmlDir\' => XOOPS_ROOT_PATH, \'trustDir\' => XOOPS_TRUST_PATH, \'sqlPrefix\' => XOOPS_DB_PREFIX, \'sourceDir\' => $isBuild? \'\' : dirname(__FILE__, 2), )); } }', '/AdelieDebug/Core/Application.php' => 'abstract class AdelieDebug_Core_Application { protected $request = null; protected $router = null; protected $config = null; protected $parameters = array(); protected $result = null; public function __construct(array $config = array()) { $this->config = $config; } public function __get($name) { return $this->$name; } public function __isset($name) { return isset($this->$name); } public function setUp() { $this->_setUpConstant(); $this->_setUpConfig(); $this->_setUpRequest(); $this->_setUpRouter(); $this->_setUpRoutes(); } public function run() { try { $this->_resolve(); $this->_runController(); } catch ( AdelieDebug_Exception_NotFoundException $e ) { $this->_runExceptionController($e, \'not_found\'); } catch ( Exception $e ) { $this->_runExceptionController($e, \'internal_server_error\'); } } public function getResult() { return $this->result; } public function isDebug() { return ( defined(\'ADELIE_DEBUG_DEBUG\') === true and ADELIE_DEBUG_DEBUG === true ); } public function config($name) { return $this->config[$name]; } public function parameter($name, $default = null) { if ( array_key_exists($name, $this->parameters) === true ) { return $this->parameters[$name]; } return $default; } public function setParameter($name, $value) { $this->parameters[$name] = $value; } protected function _setUpConstant() { defined(\'ADELIE_DEBUG_DIR\') or define(\'ADELIE_DEBUG_DIR\', dirname(__FILE__, 2)); } protected function _setUpConfig() { $filenameProd = ADELIE_DEBUG_DIR.\'/Config/Config.ini\'; $filenameDebug = ADELIE_DEBUG_DIR.\'/Config/ConfigDebug.ini\'; $config = AdelieDebug_Core_IniParser::parseFile($filenameProd); if ( $this->isDebug() === true and file_exists($filenameDebug) === true ) { $configDebug = AdelieDebug_Core_IniParser::parseFile($filenameDebug); $config = array_merge($config, $configDebug); } $this->config = $config; } protected function _setUpRequest() { $this->request = new AdelieDebug_Core_Request(); } protected function _setUpRouter() { $this->router = new AdelieDebug_Core_Router(); } protected function _setUpRoutes() { $filename = ADELIE_DEBUG_DIR.\'/Config/Route.ini\'; $routes = AdelieDebug_Core_IniParser::parseFile($filename); $this->router->setRoutes($routes); } protected function _resolve() { $pathinfo = $this->request->getPathinfo(); $parameters = $this->router->resolve($pathinfo); if ( $parameters === false ) { throw new AdelieDebug_Exception_NotFoundException(\'Route not found: \'.$pathinfo); } $this->parameters = array_merge($this->parameters, $parameters); } protected function _runController() { $this->parameters[\'Controller\'] = AdelieDebug_Core_Inflector::pascalize($this->parameters[\'controller\']); $this->parameters[\'Action\'] = AdelieDebug_Core_Inflector::pascalize($this->parameters[\'action\']); $controllerClass = $this->_getControllerClass($this->parameters[\'Controller\'], $this->parameters[\'Action\']); $controller = new $controllerClass($this); $controller->setUp(); $controller->run(); $this->result = $controller->getResult(); } protected function _getControllerClass($controller, $action) { $controllerClass = \'AdelieDebug_Controller_\'.$controller.\'_\'.$action; if ( class_exists($controllerClass) === false ) { throw new AdelieDebug_Exception_NotFoundException(\'Class not found: \'.$controllerClass); } return $controllerClass; } protected function _runExceptionController(Exception $exception, $action = \'default\') { $this->parameters = array( \'controller\' => \'error\', \'action\' => $action, \'exception\' => $exception, ); $this->_runController(); } }', '/AdelieDebug/Core/ClassLoader.php' => 'class AdelieDebug_Core_ClassLoader { protected $includePaths = array(); protected $namespaceSeparator = \'_\'; protected $fileExtension = \'.php\'; public function setIncludePath($includePath) { if ( in_array($includePath, $this->includePaths) === false ) { $this->includePaths[] = $includePath; } return $this; } public function getIncludePath() { return $this->includePaths; } public function setNamespaceSeparator($namespaceSeparator) { $this->namespaceSeparator = $namespaceSeparator; return $this; } public function getNamespaceSeparator() { return $this->namespaceSeparator; } public function setFileExtension($fileExtension) { $this->fileExtension = $fileExtension; return $this; } public function getFileExtension() { return $this->fileExtension; } public function register() { spl_autoload_register(array($this, \'loadClass\')); return $this; } public function unregister() { spl_autoload_unregister(array($this, \'loadClass\')); return $this; } public function loadClass($className) { if ( class_exists($className, false) === true ) { return; } if ( interface_exists($className, false) === true ) { return; } if ( function_exists(\'trait_exists\') === true and trait_exists($className, false) === true ) { return; } if ( preg_match(\'/[a-zA-Z0-9_\\\\\\]/\', $className) == false ) { throw new InvalidArgumentException(\'Invalid class name was given: \'.$className); } $classFile = str_replace($this->namespaceSeparator, DIRECTORY_SEPARATOR, $className); $classFile = $classFile.$this->fileExtension; foreach ( $this->includePaths as $includePath ) { $classPath = $includePath.DIRECTORY_SEPARATOR.$classFile; if ( file_exists($classPath) === true ) { require $classPath; return true; } } return false; } }', '/AdelieDebug/Core/Controller.php' => 'abstract class AdelieDebug_Core_Controller { protected $app = null; protected $result = null; protected $pageTitle = \'\'; protected $pageSubtitle = \'\'; protected $output = array(); protected $controllerTemplate = \'\'; protected $actionTemplate = \'\'; protected $themeTemplate = \'Main\'; public function __construct(AdelieDebug_Core_Application $app) { $this->app = $app; $this->controllerTemplate = $this->app->parameter(\'Controller\'); $this->actionTemplate = $this->app->parameter(\'Action\'); } public function setUp() { } abstract public function run(); public function getResult() { return $this->result; } protected function _render() { $content = $this->_renderTemplate(); $this->result = $this->_renderTheme(array(\'content\' => $content)); } protected function _renderTemplate() { $renderClass = $this->app->config(\'render.class\'); $render = new $renderClass($this->app); $values = $this->_getTemplateValues(); $values = array_merge($values, $this->output); $render->setValues($values); $render->setTemplate($this->_getTemplate()); return $render->render(); } protected function _getTemplate() { return \'Template/\'.$this->controllerTemplate.\'/\'.$this->actionTemplate; } protected function _getThemeValues(array $_values) { $values = $this->_getTemplateValues(); $values = array_merge($values, $_values); return $values; } protected function _getTemplateValues() { return array( \'app\' => $this->app, \'baseUrl\' => $this->app->request->getBaseUrl(), \'siteUrl\' => $this->app->request->getSiteUrl(), \'siteBaseUrl\' => $this->app->request->getSiteBaseUrl(), \'pageTitle\' => $this->pageTitle, \'pageSubtitle\' => $this->pageSubtitle, ); } protected function _renderTheme($content) { $renderClass = $this->app->config(\'render.class\'); $values = $this->_getThemeValues($content); $render = new $renderClass($this->app); $render->setValues($values); $render->setTemplate($this->_getTheme()); return $render->render(); } protected function _getTheme() { return \'Theme/\'.$this->app->config(\'theme.name\').\'/\'.$this->themeTemplate; } }', '/AdelieDebug/Core/Inflector.php' => 'class AdelieDebug_Core_Inflector { public static function camelize($string) { $string = self::pascalize($string); $string[0] = strtolower($string[0]); return $string; } public static function pascalize($string) { $string = strtolower($string); $string = str_replace(\'_\', \' \', $string); $string = ucwords($string); $string = str_replace(\' \', \'\', $string); return $string; } public static function snakeCase($string) { $string = preg_replace(\'/([A-Z])/\', \'_$1\', $string); $string = strtolower($string); return ltrim($string, \'_\'); } public static function snakeCaseUpper($string) { $string = self::snakeCase($string); $string = strtoupper($string); return $string; } public static function snakeCaseLower($string) { $string = self::snakeCase($string); $string = strtolower($string); return $string; } public static function humanize($string) { $string = strtr($string, \'_\', \' \'); $string = strtr($string, \'.\', \' \'); $string = preg_replace(\'/([A-Z])/\', \' $1\', $string); $string = ucwords($string); return $string; } }', '/AdelieDebug/Core/IniParser.php' => 'class AdelieDebug_Core_IniParser { public static function parseFile($filename, $processSection = true, $mode = null) { $arguments = array($filename, true); return call_user_func_array(\'parse_ini_file\', $arguments); } }', '/AdelieDebug/Core/Render.php' => 'abstract class AdelieDebug_Core_Render { protected $app = null; protected $values = array(); protected $template = \'\'; public function __construct(AdelieDebug_Core_Application $app) { $this->app = $app; } public function setValues(array $values) { $this->values = $values; } public function getValues() { return $this->values; } public function setTemplate($template) { $this->template = $template; } public function getTemplate() { return $this->template; } public function render() { return \'\'; } }', '/AdelieDebug/Core/Request.php' => 'class AdelieDebug_Core_Request { public function __construct() { } public function isPost() { return ( $_SERVER[\'REQUEST_METHOD\'] === \'POST\' ); } public function isGet() { return ( $_SERVER[\'REQUEST_METHOD\'] === \'GET\' ); } public function isSSL() { return ( isset($_SERVER[\'HTTPS\']) and $_SERVER[\'HTTPS\'] === \'on\' ); } public function isXHR() { return ( isset($_SERVER[\'HTTP_X_REQUESTED_WITH\']) === true and strtolower($_SERVER[\'HTTP_X_REQUESTED_WITH\']) === \'xmlhttprequest\' ); } public function isCLI() { return ( PHP_SAPI === \'cli\' ); } public function get($name, $default = null) { if ( isset($_GET[$name]) ) { return $_GET[$name]; } return $default; } public function post($name, $default = null) { if ( isset($_POST[$name]) ) { return $_POST[$name]; } return $default; } public function cookie($name, $default = null) { if ( isset($_COOKIE[$name]) ) { return $_COOKIE[$name]; } return $default; } public function getScheme() { if ( $this->isSSL() === true ) { return \'https\'; } return \'http\'; } public function getUrl() { return $this->getScheme().\'://\'.$this->getHost().$this->getRequestUri(); } public function getRequestUri() { return $_SERVER[\'REQUEST_URI\']; } public function getScriptName() { return $_SERVER[\'SCRIPT_NAME\']; } public function getRemoteAddr() { if ( empty($_SERVER[\'HTTP_X_FORWARDED_FOR\']) === false ) { return $_SERVER[\'HTTP_X_FORWARDED_FOR\']; } return $_SERVER[\'REMOTE_ADDR\']; } public function getHost() { if ( empty($_SERVER[\'HTTP_X_FORWARDED_HOST\']) === false ) { return $_SERVER[\'HTTP_X_FORWARDED_HOST\']; } return $_SERVER[\'HTTP_HOST\']; } public function getServerName() { if ( empty($_SERVER[\'HTTP_X_FORWARDED_SERVER\']) === false ) { return $_SERVER[\'HTTP_X_FORWARDED_SERVER\']; } return $_SERVER[\'SERVER_NAME\']; } public function getSiteUrl() { return $this->getScheme().\'://\'.$this->getHost().$this->getSiteBaseUrl(); } public function getSiteBaseUrl() { return rtrim(dirname($this->getScriptName()), \'/\'); } public function getBaseUrl() { $scriptName = $this->getScriptName(); $requestUri = $this->getRequestUri(); if ( strpos($requestUri, $scriptName) === 0 ) { return $scriptName; } elseif ( strpos($requestUri, dirname($scriptName)) === 0 ) { return rtrim(dirname($scriptName), \'/\'); } return \'\'; } public function getPathInfo() { $baseUrl = $this->getBaseUrl(); $requestUri = $this->getRequestUri(); $queryStringPosition = strpos($requestUri, \'?\'); if ( $queryStringPosition !== false ) { $requestUri = substr($requestUri, 0, $queryStringPosition); } $baseUrlLength = strlen($baseUrl); $pathInfo = substr($requestUri, $baseUrlLength); $pathInfo = strval($pathInfo); return $pathInfo; } public function getAcceptLanguages() { if ( array_key_exists(\'HTTP_ACCEPT_LANGUAGE\', $_SERVER) === false ) { return array(); } $languages = explode(\',\', $_SERVER[\'HTTP_ACCEPT_LANGUAGE\']); $acceptLanguages = array(); foreach ( $languages as $language ) { $tokens = explode(\';q=\', $language); if ( count($tokens) === 2 ) { $langcode = reset($tokens); $priority = floatval(next($tokens)); } else { $langcode = reset($tokens); $priority = 1; } $acceptLanguages[$langcode] = $priority; } arsort($acceptLanguages); return $acceptLanguages; } }', '/AdelieDebug/Core/Router.php' => 'class AdelieDebug_Core_Router { protected $routes = array(); public function compile(array $definition) { $route = $definition[\'route\']; $placeholders = $definition[\'placeholders\']; unset($definition[\'route\'], $definition[\'placeholders\']); $prefix = \'/\'.trim($route[\'prefix\'], \'/\'); $routes = array(); foreach ( $definition as $url => $properties ) { $url = $prefix.$url; $patterns = $this->_getPatterns($properties); $patterns = array_merge($placeholders, $patterns); $parameters = $this->_getParameters($properties); $tokens = $this->_tokenizeUrl($url); $parsedUrl = $this->_parseUrl($tokens, $patterns); $url = $this->_compileUrl($parsedUrl); $routes[] = array( \'url\' => $url, \'parameters\' => $parameters, ); } return $routes; } public function setRoutes(array $routes, $withCompile = true) { if ( $withCompile === true ) { $routes = $this->compile($routes); } $this->routes = $routes; } public function getRoutes() { return $this->routes; } public function resolve($pathInfo) { $pathInfo = \'/\'.trim($pathInfo, \'/\'); foreach ( $this->routes as $route ) { if ( preg_match(\'#^\'.$route[\'url\'].\'$#\', $pathInfo, $matches) ) { return array_merge($route[\'parameters\'], $matches); } } return false; } protected function _getPatterns(array $properties) { $patterns = array(); foreach ( $properties as $key => $value ) { if ( strpos($key, \':\') === 0 ) { $patterns[$key] = $value; } } return $patterns; } protected function _getParameters(array $properties) { $parameters = array(); foreach ( $properties as $key => $value ) { if ( strpos($key, \':\') === false ) { $parameters[$key] = $value; } } return $parameters; } protected function _tokenizeUrl($url) { $url = trim($url, \'/\'); $tokens = explode(\'/\', $url); return $tokens; } protected function _parseUrl(array $tokens, array $patterns = array()) { foreach ( $tokens as $index => $token ) { if ( strpos($token, \':\') !== 0 ) { continue; } if ( isset($patterns[$token]) === false ) { continue; } $regex = $patterns[$token]; $name = substr($token, 1); $tokens[$index] = \'(?P<\'.$name.\'>\'.$regex.\')\'; } return $tokens; } protected function _compileUrl(array $parsedUrl) { return \'/\'.implode(\'/\', $parsedUrl); } }', '/AdelieDebug/Debug/ClassDocumentizer.php' => 'class AdelieDebug_Debug_ClassDocumentizer extends ReflectionClass { public function documentize() { $output = array(); $output[\'filename\'] = $this->getFileName(); $output[\'class\'] = $this->_getClassPhrase(); $output[\'parent\'] = $this->_getParentPhrase(); $output[\'interface\'] = $this->_getInterfacePhrase(); $output[\'constants\'] = $this->_getConstants(); $output[\'properties\'] = $this->_getPropertyPhrases(); $output[\'methods\'] = $this->_getMethodPhrases(); return $this->_renderDocument($output); } protected function _getClassPhrase() { $tokens = array(); if ( $this->isFinal() === true ) { $tokens[] = \'final\'; } if ( $this->isAbstract() === true ) { $tokens[] = \'abstract\'; } if ( $this->isInterface() === true ) { $tokens[] = \'interface\'; } else { $tokens[] = \'class\'; } $tokens[] = $this->getName(); return implode(\' \', $tokens); } protected function _getParentPhrase() { $parent = $this->getParentClass(); if ( $parent === false ) { return \'\'; } if ( method_exists($parent, \'getNamespaceName\') === true ) { $namespace = $parent->getNamespaceName(); } else { $namespace = \'\'; } if ( $namespace === \'\' ) { $className = $parent->getName(); } else { $className = $namespace.\'\\\\\'.$parent->getName(); } return \'extends \'.$className; } protected function _getInterfacePhrase() { $interfaces = $this->getInterfaceNames(); $interfacePhrase = \'\'; if ( count($interfaces) === 0 ) { return $interfacePhrase; } if ( $this->isInterface() === true ) { $interfacePhrase .= \'extends \'; } else { $interfacePhrase .= \'implements \'; } $interfacePhrase .= implode(\', \', $interfaces); return $interfacePhrase; } protected function _getConstants() { $constantPhrases = array(); $constants = $this->getConstants(); foreach ( $constants as $name => $value ) { $value = $this->_renderValue($value); $constantPhrases[] = sprintf(\'const %s = %s;\', $name, $value); } return $constantPhrases; } protected function _getPropertyPhrases() { $properties = $this->getProperties(); $defaultValues = $this->getDefaultProperties(); $categories = array(); foreach ( $properties as $property ) { $tokens = array(); if ( $property->isPublic() === true ) { $tokens[] = \'public\'; $category = \'1\'; } elseif ( $property->isProtected() === true ) { $tokens[] = \'protected\'; $category = \'2\'; } elseif ( $property->isPrivate() === true ) { $tokens[] = \'private\'; $category = \'3\'; } if ( $property->isStatic() === true ) { $tokens[] = \'static\'; $category .= \'1\'; } else { $category .= \'2\'; } $name = $property->getName(); $value = $this->_renderValue($defaultValues[$name]); $tokens[] = \'$\'.$name; $tokens[] = \'=\'; $tokens[] = $value.\';\'; if ( isset($categories[$category]) === false ) { $categories[$category] = array(); } $categories[$category][] = implode(\' \', $tokens); } ksort($categories); $propertyPhrases = array(); foreach ( $categories as $category ) { $propertyPhrases = array_merge($propertyPhrases, $category); } return $propertyPhrases; } protected function _getMethodPhrases() { $methods = $this->getMethods(); $categories = array( \'self\' => array(), \'parent\' => array(), ); $thisClass = $this->getName(); foreach ( $methods as $method ) { $tokens = array(); $category = \'1\'; $declaringClass = $method->getDeclaringClass()->getName(); if ( $thisClass === $declaringClass ) { $class = \'self\'; } else { $class = \'parent\'; } if ( $method->isFinal() === true ) { $tokens[] = \'final\'; } if ( $method->isAbstract() === true ) { $tokens[] = \'abstract\'; } if ( $method->isPublic() === true ) { $tokens[] = \'public\'; $category .= \'1\'; } elseif ( $method->isProtected() === true ) { $tokens[] = \'protected\'; $category .= \'2\'; } elseif ( $method->isPrivate() === true ) { $tokens[] = \'private\'; $category .= \'3\'; } if ( $method->isStatic() === true ) { $tokens[] = \'static\'; } $tokens[] = \'function\'; $name = $method->getName(); if ( strpos($name, \'__\') === 0 ) { $category[0] = \'0\'; } $parameters = $this->_getParameterPhrases($method); if ( $parameters ) { $tokens[] = $declaringClass.\'::\'.$name.\'( \'.$parameters.\' );\'; } else { $tokens[] = $declaringClass.\'::\'.$name.\'( void );\'; } if ( isset($categories[$class][$category]) === false ) { $categories[$class][$category] = array(); } $categories[$class][$category][] = implode(\' \', $tokens); } ksort($categories); $methodPhrases = array( \'self\' => array(), \'parent\' => array(), ); foreach ( $categories[\'self\'] as $category ) { $methodPhrases[\'self\'] = array_merge($methodPhrases[\'self\'], $category); } foreach ( $categories[\'parent\'] as $category ) { $methodPhrases[\'parent\'] = array_merge($methodPhrases[\'parent\'], $category); } return $methodPhrases; } protected static function _getParameterPhrases(ReflectionMethod $method) { $parameterPhrases = array(); $parameters = $method->getParameters(); foreach ( $parameters as $parameter ) { $tokens = array(); if ( $parameter->isArray() === true ) { $tokens[] = \'array\'; } if ( $parameter->isPassedByReference() === true ) { $tokens[] = \'&\'; } $tokens[] = \'$\'.$parameter->getName(); if ( $parameter->isOptional() === true ) { $value = $parameter->getDefaultValue(); $value = self::_renderValue($value); $tokens[] = \'=\'; $tokens[] = $value; } $parameterPhrases[] = implode(\' \', $tokens); } return implode(\', \', $parameterPhrases); } protected static function _renderValue($value) { if ( is_array($value) === true ) { if ( count($value) > 0 ) { $value = \'array(#\'.count($value).\')\'; } else { $value = \'array()\'; } } else { $value = var_export($value, true); } return $value; } protected static function _renderDocument(array $params) { extract($params); $lines = array(); $indent = \'    \'; if ( $filename ) { $lines[] = "// defined in file: $filename"; } $firstLine = $class; if ( $parent ) { $firstLine .= \' \'.$parent; } if ( $interface ) { $firstLine .= \' \'.$interface; } $lines[] = $firstLine.\' {\'; if ( count($constants) > 0 ) { $lines[] = \'\'; $lines[] = $indent.\'/* constant */\'; foreach ( $constants as $constant ) { $lines[] = $indent.$constant; } } if ( count($properties) > 0 ) { $lines[] = \'\'; $lines[] = $indent.\'/* Properties */\'; foreach ( $properties as $property ) { $lines[] = $indent.$property; } } if ( count($methods[\'self\']) > 0 ) { $lines[] = \'\'; $lines[] = $indent.\'/* Methods */\'; foreach ( $methods[\'self\'] as $method ) { $lines[] = $indent.$method; } } if ( count($methods[\'parent\']) > 0 ) { $lines[] = \'\'; $lines[] = $indent.\'/* Inherited Methods */\'; foreach ( $methods[\'parent\'] as $method ) { $lines[] = $indent.$method; } } $lines[] = \'}\'; $lines = implode("\\n", $lines); return $lines; } }', '/AdelieDebug/Debug/DelegateManagerProxy.php' => 'class AdelieDebug_Debug_DelegateManagerProxy extends XCube_DelegateManager { protected $logger = null; public function __construct(XCube_DelegateManager $delegateManager, AdelieDebug_Debug_Logger $logger) { $this->_mCallbacks = $delegateManager->_mCallbacks; $this->_mCallbackParameters = $delegateManager->_mCallbackParameters; $this->_mDelegates = $delegateManager->_mDelegates; $this->logger = $logger; } public function register($name, &$delegate) { $observer = array(new AdelieDebug_Debug_EventObserver($name, $this->logger), \'invoke\'); $this->add($name, $observer, -9999); return parent::register($name, $delegate); } }', '/AdelieDebug/Debug/Dump.php' => 'class AdelieDebug_Debug_Dump { protected static $logger = null; public static function setLogger(AdelieDebug_Debug_Logger $logger) { self::$logger = $logger; } public static function dump() { $called = AdelieDebug_Debug_Trace::getCalled(0); $values = func_get_args(); $result = self::_dump_html($called, $values); self::$logger->addDump($result); } public static function dumpbt($level = 0) { $level = $level + 1; $called = AdelieDebug_Debug_Trace::getCalled($level); $values = func_get_args(); array_shift($values); $result = self::_dump_html($called, $values); self::$logger->addDump($result); } protected static function _dump_html($called, $values) { ob_start(); echo \'<pre style="border:1px dotted #000; font-size:12px; color:#000; background:#fff; font-family: Menlo, Monaco, Consolas, Courier New, monospace;">\'; echo $called; echo \'<div style="text-align:left;">\'; array_map(\'var_dump\', $values); echo \'</div>\'; echo \'</pre>\'; return ob_get_clean(); } }', '/AdelieDebug/Debug/ErrorHandler.php' => 'class AdelieDebug_Debug_ErrorHandler { protected $errorTypes = array ( E_ERROR => \'ERROR\', E_WARNING => \'WARNING\', E_PARSE => \'PARSING ERROR\', E_NOTICE => \'NOTICE\', E_CORE_ERROR => \'CORE ERROR\', E_CORE_WARNING => \'CORE WARNING\', E_COMPILE_ERROR => \'COMPILE ERROR\', E_COMPILE_WARNING => \'COMPILE WARNING\', E_USER_ERROR => \'USER ERROR\', E_USER_WARNING => \'USER WARNING\', E_USER_NOTICE => \'USER NOTICE\', E_STRICT => \'STRICT NOTICE\', E_RECOVERABLE_ERROR => \'RECOVERABLE ERROR\', ); protected $logger = null; public function __construct(AdelieDebug_Debug_Logger $logger) { $this->logger = $logger; $this->_setUpErrorTypes(); } public function register() { set_error_handler(array($this, \'callback\')); } public function callback($level, $message, $file, $line) { if ( ( $level & error_reporting() ) != $level ) { return true; } $trace = $this->_backtrace(3); $this->_add($level, $message, $file, $line, $trace); return true; } public function catchFatal() { $error = error_get_last(); if( $error === null ) { return; } if ( $error[\'type\'] !== E_ERROR ) { return; } $this->_add($error[\'type\'], $error[\'message\'], $error[\'file\'], $error[\'line\'], "Unable to backtrace fatal error..."); } protected function _backtrace($ignore = 1) { $output = \'\'; $backtrace = debug_backtrace(); $index = 0; for ( $i = 0; $i < $ignore; $i ++ ) { array_shift($backtrace); } foreach ( $backtrace as $index => $bt ) { $args = \'\'; if ( isset($bt[\'class\']) === true ) { $function = $bt[\'class\'].$bt[\'type\'].$bt[\'function\']; } else { $function = $bt[\'function\']; } if ( isset($bt[\'line\']) === true ) { $line = $bt[\'line\']; } else { $line = \'?\'; } if ( isset($bt[\'file\']) === true ) { $file = $bt[\'file\']; } else { $file = \'?\'; } $output .= sprintf(\'#%u %s(%s) called at [%s:%s]\'."\\n", $index, $function, $args, $file, $line); $index += 1; } return $output; } protected function _setUpErrorTypes() { $this->errorTypes[E_RECOVERABLE_ERROR] = \'RECOVERABLE ERROR\'; $this->errorTypes[E_DEPRECATED] = \'DEPRECATED\'; $this->errorTypes[E_USER_DEPRECATED] = \'USER_DEPRECATED\'; } protected function _getFormatedError(array $error, $format = "{type}: {message} in {file} on line {line}") { $message = str_replace(\'{type}\', $error[\'type\'], $format); $message = str_replace(\'{message}\', $error[\'message\'], $message); $message = str_replace(\'{file}\', $error[\'file\'], $message); $message = str_replace(\'{line}\', $error[\'line\'], $message); return $message; } protected function _add($level, $message, $file, $line, $trace) { $error = array( \'type\' => $this->_getType($level), \'level\' => $level, \'message\' => $message, \'file\' => $file, \'line\' => $line, ); $message = $this->_getFormatedError($error); $this->logger->addPhpError($message, $trace); } protected function _getType($level) { if ( isset($this->errorTypes[$level]) === true ) { return $this->errorTypes[$level]; } return \'UNKNOWN ERROR(\'.$level.\')\'; } }', '/AdelieDebug/Debug/EventObserver.php' => 'class AdelieDebug_Debug_EventObserver { protected $name = \'\'; protected $logger = null; public function __construct($name, AdelieDebug_Debug_Logger $logger) { $this->name = $name; $this->logger = $logger; } public function invoke() { $this->logger->addTriggerDelegate($this->name); } }', '/AdelieDebug/Debug/ExceptionHandler.php' => 'class AdelieDebug_Debug_ExceptionHandler_Abstract { protected $logger = null; public function __construct(AdelieDebug_Debug_Logger $logger) { $this->logger = $logger; } public function register() { set_exception_handler(array($this, \'catchException\')); } } if (class_exists(\'BaseException\')) { class AdelieDebug_Debug_ExceptionHandler extends AdelieDebug_Debug_ExceptionHandler_Abstract { public function catchException(BaseException $exception) { $this->logger->addPhpError(strval($exception)); } } } else { class AdelieDebug_Debug_ExceptionHandler extends AdelieDebug_Debug_ExceptionHandler_Abstract { public function catchException(\\Throwable $exception) { $this->logger->addPhpError(strval($exception)); } } }', '/AdelieDebug/Debug/Function.php' => 'function adump() { $args = func_get_args(); array_unshift($args, 1); call_user_func_array(array(\'AdelieDebug_Debug_Dump\', \'dumpbt\'), $args); } function atrace() { AdelieDebug_Debug_Trace::trace(1); } function awhich($variable) { $which = new AdelieDebug_Debug_Which(); $result = $which->which($variable); call_user_func(array(\'AdelieDebug_Debug_Dump\', \'dumpbt\'), 1, $result); } function asynop($object, $highlight = true) { (new AdelieDebug_Debug_Synopsys)->synopsys($object, $highlight, 2); }', '/AdelieDebug/Debug/Logger.php' => 'class AdelieDebug_Debug_Logger { const TYPE_UNKOWN = 1; const TYPE_PHP_ERROR = 2; const TYPE_DUMP = 4; const TYPE_SQL = 8; const TYPE_SQL_ERROR = 16; const TYPE_SQL_MARK = 32; const TYPE_TRACE = 64; const TYPE_MESSAGE = 128; const TYPE_SYNOPSYS = 256; const TYPE_TRIGGER_DELEGATE = 512; const TYPE_VIEW = 1024; protected $typeNames = array( self::TYPE_UNKOWN => \'UNKNOWN\', self::TYPE_PHP_ERROR => \'PHP ERROR\', self::TYPE_DUMP => \'DUMP\', self::TYPE_SQL => \'SQL\', self::TYPE_SQL_ERROR => \'SQL ERROR\', self::TYPE_SQL_MARK => \'SQL MARK\', self::TYPE_TRACE => \'TRACE\', self::TYPE_MESSAGE => \'MESSAGE\', self::TYPE_SYNOPSYS => \'SYNOPSYS\', self::TYPE_TRIGGER_DELEGATE => \'DELEGATE\', self::TYPE_VIEW => \'VIEW\', ); protected $id = 0; protected $logs = array(); protected $initTime = 0; public function __construct() { $this->initTime = microtime(true); } public function getLogs() { return $this->logs; } public function getErrorSummary() { $errors = array(); foreach ( $this->logs as $log ) { if ( $log[\'isError\'] === false ) { continue; } $typeName = $log[\'typeName\']; $errors[$typeName][] = $log[\'id\']; } return $errors; } public function add($message, $type = self::TYPE_UNKOWN, $isError = false, $info = \'\') { $now = microtime(true) - $this->initTime; $this->logs[] = array( \'id\' => $this->_incrementId(), \'type\' => $type, \'typeName\' => $this->typeNames[$type], \'message\' => $message, \'time\' => $now, \'ms\' => round( $now * 1000 ), \'isError\' => $isError, \'info\' => $info, ); } public function addPhpError($error, $trace = \'\') { $this->add($error, self::TYPE_PHP_ERROR, true, $trace); } public function addDump($message) { $this->add($message, self::TYPE_DUMP); } public function addSql($message, $info = \'\') { $this->add($message, 8, false, $info); } public function addSqlError($message, $error, $trace) { $this->add($message, self::TYPE_SQL_ERROR, true, $error."\\n".$trace); } public function addSqlMark($message) { $this->add($message, self::TYPE_SQL_MARK); } public function addTrace($message) { $this->add($message, self::TYPE_TRACE); } public function addMessage($message) { $this->add($message, self::TYPE_MESSAGE); } public function addSynopsys($synopsys) { $this->add($synopsys, self::TYPE_SYNOPSYS); } public function addTriggerDelegate($delegateName) { $message = sprintf("triggered %s", $delegateName); $this->add($message, self::TYPE_TRIGGER_DELEGATE); } public function addView($message) { $this->add($message, self::TYPE_VIEW); } protected function _incrementId() { $this->id += 1; return $this->id; } }', '/AdelieDebug/Debug/Main.php' => 'class AdelieDebug_Debug_Main { protected $logger = null; protected $errorHandler = null; protected $exceptionHandler = null; protected $reporter = null; protected $shutdown = null; public function __construct() { } public function __isset($name) { return isset($this->$name); } public function __get($name) { return $this->$name; } public function run() { $this->enableErrorReporting(); $this->_setUp(); } public function enableErrorReporting() { if ( defined(\'ADELIE_DEBUG_ERROR_REPORTING\') ) { error_reporting(ADELIE_DEBUG_ERROR_REPORTING); } else { error_reporting(-1); } ini_set(\'log_errors\', defined(\'ADELIE_DEBUG_LOG_ERRORS\')? ADELIE_DEBUG_LOG_ERRORS : true); ini_set(\'display_errors\', defined(\'ADELIE_DEBUG_DISPLAY_ERRORS\')? ADELIE_DEBUG_DISPLAY_ERRORS : false); if ( defined(\'ADELIE_DEBUG_ERROR_LOG\') ) { ini_set(\'error_log\', ADELIE_DEBUG_ERROR_LOG); } } protected function _setUp() { $this->_setUpLogger(); $this->_setUpErrorHandler(); $this->_setUpExceptionHandler(); $this->_setUpReporter(); $this->_setUpShutdown(); $this->_setUpFunctions(); } protected function _setUpLogger() { $this->logger = new AdelieDebug_Debug_Logger(); } protected function _setUpErrorHandler() { $this->errorHandler = new AdelieDebug_Debug_ErrorHandler($this->logger); $this->errorHandler->register(); } protected function _setUpExceptionHandler() { $this->exceptionHandler = new AdelieDebug_Debug_ExceptionHandler($this->logger); $this->exceptionHandler->register(); } protected function _setUpReporter() { $this->reporter = new AdelieDebug_Debug_Reporter_Html($this->logger); $this->reporter->setUp(); } protected function _setUpShutdown() { $this->shutdown = new AdelieDebug_Debug_Shutdown($this->logger); $this->shutdown->add(array($this->errorHandler, \'catchFatal\')); $this->shutdown->add(array($this->reporter, \'report\')); $this->shutdown->register(); } protected function _setUpFunctions() { AdelieDebug_Debug_Dump::setLogger($this->logger); AdelieDebug_Debug_Trace::setLogger($this->logger); AdelieDebug_Debug_Synopsys::setLogger($this->logger); $this->_loadFunctions(); } protected function _setUpDelegateManagerProxy() { $root = XCube_Root::getSingleton(); $root->mDelegateManager = new AdelieDebug_Debug_DelegateManagerProxy($root->mDelegateManager, $this->logger); } protected function _loadFunctions() { if ( defined(\'ADELIE_DEBUG_BUILD\') === true ) { eval(AdelieDebug_Archive::$archive[\'/AdelieDebug/Debug/Function.php\']); } else { require_once dirname(__FILE__).\'/Function.php\'; } } }', '/AdelieDebug/Debug/PHPInfo.php' => 'class AdelieDebug_Debug_PHPInfo { protected $config = array( \'memory\' => array( \'memory_peak_usage\' => array(\'memoryPeakUsage\'), \'memory_limit\' => array(\'ini\', \'memory_limit\'), ), \'encoding\' => array( \'output_buffering\' => array(\'iniOnOff\', \'output_buffering\'), \'default_charset\' => array(\'ini\', \'default_charset\'), \'mbstring.language\' => array(\'ini\', \'mbstring.language\'), \'mbstring.encoding_translation\' => array(\'iniOnOff\', \'mbstring.encoding_translation\'), \'mbstring.http_input\' => array(\'ini\', \'mbstring.http_input\'), \'mbstring.http_output\' => array(\'ini\', \'mbstring.http_output\'), \'mbstring.internal_encoding\' => array(\'ini\', \'mbstring.internal_encoding\'), \'mbstring.substitute_character\' => array(\'ini\', \'mbstring.substitute_character\'), \'mbstring.detect_order\' => array(\'ini\', \'mbstring.detect_order\'), ), ); public function summary() { $summary = array(); foreach ( $this->config as $categoryName => $info ) { $summary[$categoryName] = array(); foreach ( $info as $name => $callback ) { $summary[$categoryName][$name] = $this->_get($callback); } } return $summary; } protected function _get(array $callback) { $method = \'_\'.array_shift($callback); if ( method_exists($this, $method) === false ) { throw new RuntimeException(__CLASS__.\': method does not exit: \'.$method); } return call_user_func_array(array($this, $method), $callback); } protected function _memoryPeakUsage() { return AdelieDebug_TextFormat::bytes(memory_get_peak_usage()); } protected function _ini($name) { return ini_get($name); } protected function _iniOnOff($name) { if ( ini_get($name) ) { return \'On\'; } else { return \'Off\'; } } }', '/AdelieDebug/Debug/Reporter/Console.php' => 'class AdelieDebug_Debug_Reporter_Console extends AdelieDebug_Debug_Reporter { public function report() { if ( defined(\'ADELIE_DEBUG_DISABLE_CONSOLE_LOG\') === true ) { return; } if ( isset($_SESSION) === false ) { $_SESSION = array(); } $sentHeaders = headers_list(); $requests = array( \'$_GET\' => $_GET, \'$_POST\' => $_POST, \'$_SESSION\' => $_SESSION, \'$_COOKIE\' => $_COOKIE, \'$_FILES\' => $_FILES, \'$_SERVER\' => $_SERVER, ); $request = new AdelieDebug_Core_Request(); $data = array( \'time\' => time(), \'url\' => $request->getUrl(), \'errorSummary\' => $this->logger->getErrorSummary(), \'timeline\' => $this->logger->getLogs(), \'sentHeaders\' => $sentHeaders, \'requests\' => $requests, ); $filename = XOOPS_CACHE_PATH.\'/AdelieDebugLog_\'.date(\'YmdHis\').\'_\'.uniqid().\'.json\'; file_put_contents($filename, json_encode($data)); } }', '/AdelieDebug/Debug/Reporter/Html/Reportable.php' => 'class AdelieDebug_Debug_Reporter_Html_Reportable { public function __construct() { } public function isReportable() { if ( $this->isCli() === true ) { return false; } if ( $this->isHtmlContent() === false ) { return false; } if ( $this->isXMLHttpRequest() === true ) { return false; } if ( defined(\'ADELIE_DEBUG_DISABLE\') === true ) { return false; } return true; } public function isCli() { return ( PHP_SAPI === \'cli\' ); } public function isHtmlContent() { $headers = headers_list(); foreach ( $headers as $header ) { $header = trim($header); if ( preg_match(\'#content-type:#i\', $header) > 0 and preg_match(\'#content-type:\\s*text/html#i\', $header) == 0 ) { return false; } } return true; } public function isXMLHttpRequest() { if ( isset($_SERVER[\'HTTP_X_REQUESTED_WITH\']) === false ) { return false; } if ( $_SERVER[\'HTTP_X_REQUESTED_WITH\'] === \'XMLHttpRequest\' ) { return true; } return false; } }', '/AdelieDebug/Debug/Reporter/Html.php' => 'class AdelieDebug_Debug_Reporter_Html extends AdelieDebug_Debug_Reporter { protected $reportable = null; public function setUp() { $this->reportable = new AdelieDebug_Debug_Reporter_Html_Reportable(); } public function report() { if ( $this->reportable->isReportable() === false ) { return; } $this->_printContents(); } protected function _printContents() { $application = new AdelieDebug_Application(); $application->setPathinfo(\'/debug/report\'); $application->setParameter(\'logger\', $this->logger); $application->setParameter(\'via\', __CLASS__); $application->setUp(); $application->run(); $result = $application->getResult(); echo $result; } }', '/AdelieDebug/Debug/Reporter.php' => 'class AdelieDebug_Debug_Reporter { protected $logger = null; public function __construct(AdelieDebug_Debug_Logger $logger) { $this->logger = $logger; } public function setUp() { } public function report() { echo \'<pre style="text-align:left;">\'; var_dump($this->logger->getLogs()); echo \'</pre>\'; } }', '/AdelieDebug/Debug/Shutdown.php' => 'class AdelieDebug_Debug_Shutdown { protected $callbacks = array(); public function add($callback) { $this->callbacks[] = $callback; } public function register() { register_shutdown_function(array($this, \'report\')); } public function report() { foreach ( $this->callbacks as $callback ) { call_user_func($callback); } } }', '/AdelieDebug/Debug/Synopsys.php' => 'class AdelieDebug_Debug_Synopsys { protected static $logger = null; public static function setLogger(AdelieDebug_Debug_Logger $logger) { self::$logger = $logger; } public function synopsys($object, $highlight = true, $minus = 1) { if ( is_object($object) === false and is_string($object) === false ) { call_user_func(array(\'AdelieDebug_Debug_Dump\', \'dumpbt\'), $minus, $object); } else { if ( is_string($object) === true ) { if ( class_exists($object) === false and interface_exists($object) === false ) { call_user_func(array(\'AdelieDebug_Debug_Dump\', \'dumpbt\'), $minus, $object); } } else { $documentizer = new AdelieDebug_Debug_ClassDocumentizer($object); $document = $documentizer->documentize(); if ( $highlight === true ) { $document = highlight_string(\'<?php \'.$document, true); $document = str_replace(\'&lt;?php&nbsp;\', \'\', $document); } $document = AdelieDebug_Debug_Trace::getCalled($minus - 1).$document; self::$logger->addSynopsys($document); } } } }', '/AdelieDebug/Debug/Trace.php' => 'class AdelieDebug_Debug_Trace { protected static $logger = null; public static function setLogger(AdelieDebug_Debug_Logger $logger) { self::$logger = $logger; } public static function trace($minus = 0, $return = false) { $exception = new Exception(); $trace = $exception->getTraceAsString(); for ( $i = 0; $i < $minus; $i ++ ) { $trace = preg_replace("/.*\\n#1([^\\d])/s", \'#1$1\', $trace); $trace = preg_replace_callback(\'/^#(\\d+)/m\', function($m) { return \'#\' . ($m[1] - 1); }, $trace); } if ( $return === true ) { return $trace; } else { self::$logger->addTrace($trace); } } public static function getCalled($level = 0, $html = true) { $level = $level + 1; $trace = array( \'file\' => \'Unknown file\', \'line\' => 0, ); $traces = debug_backtrace(); if ( isset($traces[$level]) === true ) { $trace = array_merge($trace, $traces[$level]); } $called = sprintf("Called in %s on line %s", $trace[\'file\'], $trace[\'line\']); if ( $html === true ) { $called = \'<div style="font-size:10px; background:#ddd;text-align:left;">\'.$called."</div>"; } return $called; } }', '/AdelieDebug/Debug/Which.php' => 'class AdelieDebug_Debug_Which { public function __construct() { } public function which($variable) { $type = gettype($variable); $method = \'which\'.ucfirst($type); if ( method_exists($this, $method) === true ) { $result = $this->$method($variable); } else { $result = false; } if ( $result === false ) { $result = "Not found: ".$type; } $result = \'Which: \'.$result; return $result; } public function whichObject($object) { return $this->whichClass(get_class($object)); } public function whichString($string) { if ( preg_match(\'/^[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*$/\', $string) > 0 ) { $found = array(); if ( class_exists($string) === true ) { $found[] = $this->whichClass($string); } if ( function_exists($string) === true ) { $found[] = $this->whichFunction($string); } if ( defined($string) === true ) { } $found = implode("\\n", $found); return $found; } return false; } public function whichClass($class) { $reflectionClass = new ReflectionClass($class); $filename = $reflectionClass->getFileName(); $line = $reflectionClass->getStartLine(); if ( $filename === false ) { $filename = \'unknown\'; } if ( $line === false ) { $line = \'0\'; } return sprintf("Class \'%s\' defined in %s at line %s", $class, $filename, $line); } public function whichFunction($function) { $reflectionFunction = new ReflectionFunction($function); $filename = $reflectionFunction->getFileName(); $line = $reflectionFunction->getStartLine(); if ( $filename === false ) { $filename = \'unknown\'; } if ( $line === false ) { $line = \'0\'; } return sprintf("Function \'%s\' defined in %s at line %s", $function, $filename, $line); } }', '/AdelieDebug/Debug/XoopsDebugger.php' => 'if ( class_exists(\'Legacy_AbstractDebugger\') === false and class_exists(\'Xcore_AbstractDebugger\') ) { class Legacy_AbstractDebugger extends Xcore_AbstractDebugger {} } class AdelieDebug_Debug_XoopsDebugger extends Legacy_AbstractDebugger { protected $logger = null; protected $isDebugRenderSystem = false; public function __construct(AdelieDebug_Debug_Logger $logger) { $this->logger = $logger; } public function enableDebugRenderSystem() { $this->isDebugRenderSystem = true; } public function prepare() { $GLOBALS[\'xoopsErrorHandler\'] =& AdelieDebug_Debug_XoopsErrorHandler::getInstanceWrapper(); $GLOBALS[\'xoopsErrorHandler\']->activate(false); $xoopsLogger = AdelieDebug_Debug_XoopsLogger::getInstance(); $xoopsLogger->setLogger($this->logger); $xoopsLogger->importParent(); $GLOBALS[\'xoopsLogger\'] =& $xoopsLogger; $root = XCube_Root::getSingleton(); $root->mController->mLogger = $xoopsLogger; $root->mController->mDB->setLogger($xoopsLogger); } public function isDebugRenderSystem() { return $this->isDebugRenderSystem; } }', '/AdelieDebug/Debug/XoopsErrorHandler.php' => '$reflectionMethod = new ReflectionMethod(\'XoopsErrorHandler\', \'getInstance\'); if ( $reflectionMethod->isStatic() === true ) { class AdelieDebug_Debug_XoopsErrorHandler extends XoopsErrorHandler { public function __construct() { } public static function &getInstance() { static $instance = null; if ( $instance === null ) { $instance = new self(); } return $instance; } public static function &getInstanceWrapper() { return self::getInstance(); } } } else { class AdelieDebug_Debug_XoopsErrorHandler extends XoopsErrorHandler { public function __construct() { } public function &getInstance() { static $instance = null; if ( $instance === null ) { $instance = new self(); } return $instance; } public static function &getInstanceWrapper() { $obj = new self(); return $obj->getInstance(); } } }', '/AdelieDebug/Debug/XoopsLogger/TP.php' => 'class AdelieDebug_Debug_XoopsLogger_TP extends AdelieDebug_Debug_XoopsLogger { public static function instance() { static $instance = null; if ( $instance === null) { $instance = new self(); } return $instance; } }', '/AdelieDebug/Debug/XoopsLogger/XCL.php' => 'class AdelieDebug_Debug_XoopsLogger_XCL extends AdelieDebug_Debug_XoopsLogger { public static function &instance() { static $instance = null; if ( $instance === null) { $instance = new self(); } return $instance; } }', '/AdelieDebug/Debug/XoopsLogger.php' => 'class AdelieDebug_Debug_XoopsLogger extends XoopsLogger { protected $logger = null; public function __construct() { } public static function getInstance() { $reflectionClass = new ReflectionClass(\'XoopsLogger\'); $instanceMethod = $reflectionClass->getMethod(\'instance\'); if ( $instanceMethod->returnsReference() === false ) { return AdelieDebug_Debug_XoopsLogger_TP::instance(); } else { return AdelieDebug_Debug_XoopsLogger_XCL::instance(); } } public function setLogger(AdelieDebug_Debug_Logger $logger) { $this->logger = $logger; } public function importParent() { $logger = parent::instance(); foreach ( $logger as $k => $v ) { $this->$k = $v; } $this->_importQueryLogs(); } public function addQuery($sql, $error = null, $errno = null) { $this->queries[] = array(\'sql\' => $sql, \'error\' => $error, \'errno\' => $errno); if ( $error ) { $trace = AdelieDebug_Debug_Trace::trace(2, true); $this->logger->addSqlError($sql, $error, $trace); } else { $this->logger->addSql($sql); } } public function clearQuery() { $this->logger->addMessage(\'clearQuery() was commanded. But this request was rejected by AdelieDebug.\'); } protected function _importQueryLogs() { foreach ( $this->queries as $query ) { if ( $query[\'error\'] ) { $this->logger->addSqlError($query[\'sql\'], $query[\'error\']); } else { $this->logger->addSql($query[\'sql\']); } } } }', '/AdelieDebug/Exception/NotFoundException.php' => 'class AdelieDebug_Exception_NotFoundException extends RuntimeException { }', '/AdelieDebug/File/css/report.css' => '#xhelp-main{bottom:0;display:block;height:40px;left:0;margin:0;position:fixed;z-index:2000}#xhelp-menu{align-items:center;background-image:linear-gradient(to top,#16191d 0,#1b1e2b 100%);border-top-left-radius:5px;border-top-right-radius:5px;color:#eee;display:flex;filter:drop-shadow(0 0 .5rem #1b1e2b);font:14px sans-serif;height:40px;padding:0 1em;text-transform:uppercase}#xhelp-menu a{border-radius:5px;color:#fff;display:inline-block;margin:auto .25em;padding:.125em .5em;text-decoration:none}#xhelp-menu a>span{background:#aa1e1e;border-radius:5px;border:1px solid #1a1d23;padding:0 .5em}#xhelp-menu a:hover{background:#aa1e1e}#xhelp-menu a:hover>span{background:#1a1d23}#xhelp-open{display:inline-block;height:100%;width:100%}#adelie_view,#kint_view{background:#171a27;border:1px solid #123;bottom:44px;box-sizing:border-box;box-shadow:1px 5px 5px 0 #00000073;display:none;height:400px;left:0;padding-left:calc(100vw - 100%);position:fixed;top:auto;width:50vw;z-index:2020}#viewTitle{align-items:center;background:#111;border:1px solid #111;display:inline-flex;font-size:16px;height:32px;justify-content:space-between;margin:0;padding:0 0 0 1em;position:relative;width:100%}#viewTitle #viewControl a{font-size:16px;text-align:center;padding:2px;margin-right:.5em}.adelieDebug::-webkit-resizer{border:8px solid transparent #363e49 #242a33 transparent}.adelieDebug::-webkit-scrollbar{width:8px;height:auto}.adelieDebug::-webkit-scrollbar-button{display:none}.adelieDebug::-webkit-scrollbar-thumb{background:linear-gradient(145deg,#242a33,#3d4752);min-height:80px;border-radius:0}.adelieDebug::-webkit-scrollbar-track{border:1px solid #363d49;border-radius:5px;background:linear-gradient(145deg,#21242c,#1e242e)}.adelieDebug,.kintDebug{display:block;height:calc(100% - 32px);overflow-y:auto;padding:1em;width:100%;scrollbar-gutter:stable both-edges;scrollbar-color:#414967 #1b1e2b;scrollbar-width:thin}.kintDebug{z-index:2030}.adelieDebug a{color:#fff;cursor:pointer}.adelieDebug h1,.adelieDebug h2,.adelieDebug h3,.adelieDebug h4{color:#0cf;font-weight:300;text-transform:uppercase}.adelieDebug table.data{border:1px solid hsl(214deg 14% 8%);box-shadow:1px 1px 4px 4px #17191c;border-collapse:collapse;font-family:Menlo,Monaco,Consolas,monospace;width:100%}.adelieDebug table.data thead tr{background:#121416}.adelieDebug table.data th{border-bottom:1px solid #182739;color:#fff;padding:.5em}.adelieDebug table.data tbody td{border-bottom:1px solid #182739;padding:.5em}.adelieDebug table.data tbody td:first-child{width:200px}.adelieDebug table.data tbody tr:hover{background:#1d232b}.adelieDebug pre{border:0;font:13px Menlo,Monaco,Consolas,monospace;margin:1px 0;overflow-wrap:break-word;text-shadow:1px 2px #000;white-space:pre-wrap;word-break:break-all;word-wrap:break-word!important}.adelieDebug pre.console{background-color:#111;padding:2em;border:1px solid #212830}.adelieDebug pre.SQL .logTime{background:#374d19;background-image:repeating-linear-gradient(51deg,transparent,transparent 4px,#374d19 4px,#273612 8px);height:100%;position:absolute;top:0;left:0}.adelieDebug pre.PHP{cursor:pointer}.adelieDebug pre.info{color:#c3e88d}.adelieDebug pre.OVERLAP{background:#feefb480;color:#9e5f00}.adelieDebug pre.MARK{background-color:#292d3e;color:#00529b}.adelieDebug pre.ERROR{background:#9c2116;color:#face74}.adelieDebug .msgInfo,.adelieDebug .msgSuccess,.adelieDebug .msgWarning,.adelieDebug .msgError{background-color:#16191d;border:1px solid;border-radius:5px;font-size:14px;margin:10px;padding:10px}.adelieDebug .errorId{border:1px solid #aa1e1e;border-radius:5px;margin:0 .5em;padding:0 .25em}.adelieDebug .errorId.selected{background:#aa1e1e;border:1px solid #1a1d23}.adelieDebug .msgInfo{background-color:#bde5f8;color:#00529b}.adelieDebug .msgSuccess{background-color:#54850080;color:#82ee0e}.adelieDebug .msgWarning{background-color:#806f46;color:#c37706}.adelieDebug .msgError{border:1px solid #aa1e1e;color:#ff9800}.errorCount{font-size:14px;background-color:#3b1d1f;color:#aa1e1e;font-weight:bold}.adelieDebug details{animation-name:accordion-close;animation-duration:.4s;animation-timing-function:ease-in-out;border-radius:5px;margin:0 auto .5rem;overflow:hidden;transform-origin:top}.adelieDebug details[open]{animation-name:accordion-open;animation-duration:.3s;animation-timing-function:ease-in-out;transform-origin:top}@keyframes accordion-open{from{max-height:300px}to{max-height:300px}}@keyframes accordion-close{from{min-height:300px}to{min-height:56px}}.adelieDebug details summary{background:#121821;border-radius:7px;cursor:pointer;display:block;position:relative}.adelieDebug details summary h3{border-bottom:1px solid #0d4859;font-size:16px;line-height:1.5;margin:.125em .5em;padding:.5em}.adelieDebug details summary:before{content:\'\';border-width:.4rem;border-style:solid;border-color:transparent transparent transparent #0cf;position:absolute;top:1em;right:1em;transform:rotate(90deg);transform-origin:.2rem 50%;transition:.25s transform ease}.adelieDebug details[open]>summary:before{transform:rotate(270deg)}.adelieDebug details summary::-webkit-details-marker{display:none}.adelieDebug details>div{animation-name:accordion-content-close;animation-duration:.3s;animation-timing-function:ease-in-out;height:0;margin-top:0;margin-bottom:0;opacity:0;padding:1em;transition:.3s}.adelieDebug details[open]>div{animation-name:accordion;animation-duration:.3s;animation-timing-function:ease-in-out;height:auto;opacity:1;transform-origin:top}@keyframes accordion{from{transform:scaleY(0);opacity:0}to{transform:scaleY(1);opacity:1}}@keyframes accordion-content-close{from{margin-top:0}to{margin-top:-300px}}.adelieDebug details[open]>div{animation-name:accordion-content;animation-duration:.3s;animation-timing-function:ease-in-out;animation-delay:.3s;animation-fill-mode:forwards;opacity:0}@keyframes accordion-content{from{opacity:0}to{opacity:1}}.xhelp-overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:rgba(0,0,0,0.7);transition:opacity 500ms;visibility:hidden;opacity:0}.xhelp-overlay:target{visibility:visible;opacity:1;z-index:4020}.xhelp-overlay:not(:target){opacity:0;visibility:hidden;transition:opacity 1s,visibility 1s}.xhelp-modal{background:hsl(220,12%,10%);border:1px solid #0d4859;border-radius:5px;box-shadow:4px 8px 12px 0 rgba(0,0,0,0.8);display:block;min-height:240px;margin:70px auto;padding:20px;position:relative;transition:all 5s ease-in-out;overscroll-behavior:contain;width:440px}.xhelp-modal .xhelp-close{position:absolute;top:20px;right:30px;transition:all 200ms;font-size:30px;font-weight:bold;text-decoration:none;color:#0cf}.xhelp-modal .xhelp-close:hover{color:#fff}.xhelp-content{display:contents;height:480px;width:400px;overflow-y:auto;scrollbar-color:#414967 #1b1e2b;scrollbar-width:thin}.xhelp-content h2,.xhelp-content h3{color:#0cf;text-transform:uppercase}.xhelp-content>h2 b{color:#ff4227;text-transform:capitalize}.xhelp-content h3{font-size:14px}.xhelp-content span.data{background:#1a1d23;border-radius:5px;display:block;font-family:Menlo,Monaco,Consolas,monospace;font-size:14px;line-height:1.5;padding:1em;margin:1em 0}', '/AdelieDebug/File/js/report.js' => '// xHelp functions for AdelieDebug
function animateSlider(hash) {
    if (!$("#xhelp-main div.xhelp-open").length) {
        if (hash == "#adelie") {
            openPopup(hash);
        }
        if (hash == "#kint") {
            openPopup(hash);
        }
    } else {
        if (hash == "#adelie") {
            openAndClose(hash)
        }
        if (hash == "#kint") {
            openAndClose(hash)
        }
    }
}
function openPopup(hash) {
    $(hash + "_view").slideToggle().addClass("xhelp-open");
}
function openAndClose(hash) {
    if ($(hash + "_view").hasClass("xhelp-open")) {
        $($(hash + "_view")).slideToggle().removeClass();
    } else {
        $("#xhelp-main div.xhelp-open").slideToggle().removeClass();
        $(hash + "_view").slideToggle().addClass("xhelp-open");
    }
}
function renameElement($element,newElement){
    $element.wrap("<"+newElement+">");
    $newElement = $element.parent();
    //Copying Attributes
    $.each($element.prop(\'attributes\'), function() {
        $newElement.attr(this.name,this.value);
    });
    $element.contents().unwrap();
    return $newElement;
}

// xHelp View Control
$(function() {
    $("#xhelp-menu a, #close-view").click(function(e) {
        e.preventDefault();
        animateSlider(this.hash);
    });
    // view control
    $("#minimize").hide();
    // maximize
    var p = $(\'#adelie_view\').position();
    $("#maximize").click(function (e) {
        e.preventDefault();
        $("#adelie_view").animate({
            width: $(window).width(),
            height:$(window).height(),
            top: "-1"
        }, 500);
        $(\'#adelie_view\').css({
            "top": "0"
        });
        $("#maximize").hide(100);
        $("#minimize").show(100);
    });
    // minimize
    $("#minimize").click(function (e) {
        e.preventDefault();
        $(\'#adelie_view\').css({
            "position": "fixed",
            "top": "auto",
            "bottom": "44px"
        });
        $("#adelie_view").animate({
            width: "50vw",
            height: "400px",
            left: p.left+\'px\'
        }, 500);
        $("#maximize").show(100);
        $("#minimize").hide(100);
    });
});

// xHelp Panel Scroll
$(function () {
    // Open Details and Scroll to Error Id
    $(\'.errorId\').click(function(e){
        var id= $(this).prop("hash");
        // Open details
        renameElement($(\'details.timeline\'),\'details open\');
        $(\'#adelieReport\').animate({
            scrollTop: $(id).offset().top - $(id).offsetParent().offset().top -20
        }, 500);
        e.preventDefault();
    });
    // Click Error and Scroll to Top
    $(\'.ERROR\').click(function(e){
        $(\'#adelieReport\').animate({
            scrollTop: $(\'#adelieReport\').offset().top - $(\'#adelieReport\').offsetParent().offset().top -20
        }, 500);
        e.preventDefault();
    });

});
', '/AdelieDebug/Library/Smarty.php' => 'if ( class_exists(\'Smarty\') === false ) { if ( file_exists(XOOPS_ROOT_PATH.\'/class/smarty/Smarty.class.php\') === true ) { require_once XOOPS_ROOT_PATH.\'/class/smarty/Smarty.class.php\'; } elseif ( file_exists(XOOPS_TRUST_PATH.\'/libs/smarty/Smarty.class.php\') === true ) { require_once XOOPS_TRUST_PATH.\'/libs/smarty/Smarty.class.php\'; } else { require_once XOOPS_TRUST_PATH.\'/vendor/smarty/Smarty.class.php\'; } } class AdelieDebug_Library_Smarty extends Smarty { public function __construct() { parent::__construct(); $this->compile_id = null; $this->_canUpdateFromFile = true; $this->compile_check = true; $this->compile_dir = XOOPS_COMPILE_PATH; $this->left_delimiter = \'<{\'; $this->right_delimiter = \'}>\'; $this->force_compile = false; } }', '/AdelieDebug/Preload.php' => 'class AdelieDebug_Preload extends XCube_ActionFilter { protected $debugger = null; public function preFilter() { $this->_bootstrap(); $this->_setUp(); $this->_registerEventListeners(); } public function topAccessEventHandler() { if ( $this->_isAdelieDebugPage() === false ) { return; } $application = new AdelieDebug_Application(); $application->setUp(); $application->run(); $result = $application->getResult(); echo $result; die; } public function setupDebugEventHandler(&$instance, $debugMode) { $instance = new AdelieDebug_Debug_XoopsDebugger($this->debugger->logger); if ( $debugMode === XOOPS_DEBUG_SMARTY ) { $instance->enableDebugRenderSystem(); } $this->debugger->enableErrorReporting(); } public function addOutputFilterToXoopsTpl(Smarty $xoopsTpl) { if ( method_exists($xoopsTpl, \'registerFilter\') === true ) { $xoopsTpl->registerFilter(\'output\', array($this, \'filterSmartyOutput\')); } else { $xoopsTpl->register_outputfilter(array($this, \'filterSmartyOutput\')); } } protected function _bootstrap() { if ( defined(\'ADELIE_DEBUG_BUILD\') === true ) { $classLoader = new AdelieDebug_Archive_ClassLoader(); $classLoader->setIncludePath(\':eval:\'); $classLoader->register(); } else { require_once dirname(__FILE__).\'/Core/ClassLoader.php\'; $classLoader = new AdelieDebug_Core_ClassLoader(); $classLoader->setIncludePath(dirname(dirname(__FILE__))); $classLoader->register(); } } protected function _setUp() { $this->debugger = new AdelieDebug_Debug_Main(); $this->debugger->run(); } protected function _registerEventListeners() { $this->mRoot->mDelegateManager->add(\'Legacypage.Top.Access\', array($this, \'topAccessEventHandler\'), 0); $this->mController->mSetupDebugger->add(array($this, \'setupDebugEventHandler\'), 99999); $this->mRoot->mDelegateManager->add(\'XoopsTpl.New\', array($this, \'addOutputFilterToXoopsTpl\')); } protected function _isAdelieDebugPage() { return ( strpos($_SERVER[\'REQUEST_URI\'], \'index.php/debug\') !== false ); } public function filterSmartyOutput($output, $xoopsTpl) { $steps = debug_backtrace(); foreach ( $steps as $step ) { if ( $step[\'function\'] === \'fetch\' and $step[\'class\'] === \'Smarty\' and isset($step[\'args\'][0]) === true ) { $this->debugger->logger->addView(sprintf(\'Render template: %s\', $step[\'args\'][0])); return $output; } } $this->debugger->logger->addView(\'Render a template, but template name is unknown...\'); return $output; } }', '/AdelieDebug/Render/Smarty.php' => 'class AdelieDebug_Render_Smarty extends AdelieDebug_Render { public function render() { $template = $this->_getTempalte(); $values = $this->getValues(); $smarty = $this->_getSmarty(); $smarty->assign($values); $result = $smarty->fetch($template); return $result; } protected function _getTempalte() { $template = ADELIE_DEBUG_DIR.\'/\'.$this->template.\'.tpl\'; if ( file_exists($template) === false ) { throw new RuntimeException("Template not found: ".$template); } return $template; } protected function _getSmarty() { return new AdelieDebug_Library_Smarty(); } }', '/AdelieDebug/Render/SmartyOnBuild.php' => 'class AdelieDebug_Render_SmartyOnBuild extends AdelieDebug_Render_Smarty { protected function _getTempalte() { $template = \'/AdelieDebug/\'.$this->template.\'.tpl\'; if ( array_key_exists($template, AdelieDebug_Archive::$archive) === false ) { throw new RuntimeException("Template not found: ".$template); } $filename = XOOPS_CACHE_PATH.\'/\'.trim(strtr($template, \'/\', \'_\'), \'_\'); if ( file_exists($filename) === false or filemtime($filename) < ADELIE_DEBUG_BUILD_TIME ) { file_put_contents($filename, AdelieDebug_Archive::$archive[$template]); } return $filename; } }', '/AdelieDebug/Render.php' => 'abstract class AdelieDebug_Render extends AdelieDebug_Core_Render { }', '/AdelieDebug/Template/Console/Index.tpl' => '<h1>AdelieDebug Console - <{$siteUrl}></h1>', '/AdelieDebug/Template/Error/InternalServerError.tpl' => '<h1><{$statusMessage}></h1><pre><{$exception}></pre>', '/AdelieDebug/Template/Error/NotFound.tpl' => '<h1><{$statusMessage}></h1><pre><{$exception}></pre>', '/AdelieDebug/Template/Report/Index.tpl' => '<script type="text/javascript">
    if (typeof jQuery == \'undefined\') {
        // Fallback for CDN in case of Fatal error!
    document.write(unescape("%3Cscript src=\'https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\' type=\'text/javascript\'%3E%3C/script%3E"));
}
</script><style><{$css}></style><{* Capture Result and Total of Errors to show in the menu *}><{capture name="adeResult"}><{foreach from=$errorSummary key="typeName" item="ids"}><div class="msgError"><strong><{$typeName}> [ <{capture name="adeError"}><{$ids|@count}><{/capture}><{$smarty.capture.adeError}> ]</strong><span>...</span><{foreach from=$ids item="id"}><a href="#adelieDebugLogId<{$id}>" class="errorId">#<{$id}></a><{/foreach}></div><{foreachelse}><div class="msgSuccess">There is no error.</div><{/foreach}><{/capture}><div id="xhelp-main"><div id="xhelp-menu"><a href="#adelie">Adelie Debug <{if $smarty.capture.adeError ne ""}><span><{$smarty.capture.adeError}></span><{/if}></a><a href="#kint">Kint</a></div><div id="adelie_view"><div id="viewTitle"><div class="title"><a href="#xhelp-about" aria-label="About AdelieDebug">ℹ — Adelie Debug</a> — <small><{if $isAdmin}>Admin<{else}>Safe<{/if}> mode</small></div><div id="viewControl"><a href="#" id="maximize" aria-label="maximize">🗖</a><a href="#" id="minimize" aria-label="minimize">🗕</a><a href="#adelie" id="close-view" title="Close">🗙</a></div></div><{* viewTitle *}><div class="adelieDebug" id="adelieReport"><h3>Report</h3><{$smarty.capture.adeResult}><div id="adelieDebugDetail"><details class="timeline"><summary><h3>Timeline</h3></summary><div id="adelieDebugPhpErrors"><table class="data"><thead><tr><th>ID</th><th>ms</th><th>Type</th><th>Message</th></tr></thead><tbody><{foreach from=$logs item="log"}><tr><td style="width: 10px;" id="adelieDebugLogId<{$log.id}>"><{$log.id}></td><td style="width: 10px;"><{$log.ms}></td><td><{$log.typeName}></td><td><{if $isAdmin}><{assign var="message" value=$log.message}><{assign var="info" value=$log.info}><{else}><{assign var="message" value=$log.message|replace:$sourceDir:\'(adelie)\'|replace:$htmlDir:\'(html)\'|replace:$trustDir:\'(trust)\'|replace:$sqlPrefix:\'(prefix)\'}><{assign var="info" value=$log.info|replace:$sourceDir:\'(adelie)\'|replace:$htmlDir:\'(html)\'|replace:$trustDir:\'(trust)\'|replace:$sqlPrefix:\'(prefix)\'}><{/if}><{if $log.typeName == \'DUMP\'}><{$message}><{elseif $log.typeName == \'SYNOPSYS\'}><{$message}><{elseif $log.typeName == \'DELEGATE\'}><div style="font-size:12px;"><{$message|escape}></div><{elseif $log.typeName == \'SQL\'}><{strip}><pre class="info <{$log.typeName}>" style="position:relative;"><div style="width: <{$log.timePer}>%;" class="logTime"></div><div style="position: relative;"><{$message|escape}></div></pre><{/strip}><{if $log.info}><pre><{$info|escape}></pre><{/if}><{else}><pre class="info <{$log.typeName}>"><{$message|escape}></pre><{if $log.info}><pre><{$info|escape}></pre><{/if}><{/if}></td></tr><{/foreach}></tbody></table></div></details><{*  phpErrors  *}><details><summary><h3>Sent Headers</h3></summary><div id="adelieDebugSentHeaders"><{strip}><pre class="console"><{foreach from=$sentHeaders item="header"}><{$header}><br><{/foreach}></pre><{/strip}></div></details><{*  sentHeaders  *}><details><summary><h3>Requests</h3></summary><div id="adelieDebugRequest"><{foreach from=$requests key="name" item="request"}><{if $isAdmin || ($name != \'$_SERVER\' && $name != \'$_SESSION\')}><p class="h3"><{$name}></p><{if $request}><table class="data"><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><{foreach from=$request key="key" item="value"}><tr><td><{$key}></td><td><{$value|@var_dump}></td></tr><{/foreach}></tbody></table><{else}><p>There is no values.</p><{/if}><{/if}><{/foreach}></div></details><{*  debugRequest  *}><details><summary><h3>PHP Information</h3></summary><div id="infoPhp"><{foreach from=$phpInfo key="categoryName" item="info"}><details><summary><h3><{$categoryName|ucwords}></h3></summary><div class="infoCat"><{if $info}><table class="data"><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><{foreach from=$info key="key" item="value"}><tr><td><{$key}></td><td><{$value}></td></tr><{/foreach}></tbody></table><{else}><p>There is no values.</p><{/if}></div></details><{/foreach}></div></details><{*  phpInfo  *}></div><{* adelieDebugDetail  *}></div><{*  adelieDebug  *}></div><{*  adelie_view  *}><div id="kint_view"><div class="kintDebug"><h1>Kint</h1><{if file_exists("Kint.class.php")}><{include file="Kint.class.php"}><{else}><div class="error">Kint is not installed!</div><{/if}></div></div><div id="xhelp-about" class="xhelp-overlay" title="About AdelieDebug"><div class="xhelp-modal"><a class="xhelp-close" href="#">&times;</a><div class="xhelp-content"><h2>Adelie<b>Debug</b></h2><{if $isBuild}><span class="data" title="AdelieDebug Version">Build <{\'YmdHis\'|date:$buildTime}></span><{else}><span class="data" title="adelieVersion">Source</span><{/if}><p>A powerful development tool for developers of XCL modules, preloads and themes — <a href="https://github.com/xoopscube/adelie-debug-xcl" target="_blank">License GPL v2.0</a></p><h3>Credits</h3><span class="data" title="AdelieDebug Authors">
            Author Suin &copy; 2011<br>
            Update by Naon-pon (PHP7)<br>
            Update by Gigamaster (XCL23)
            </span><h3>Cheat Sheet</h3><span class="data" title="AdelieDebug Help">
                adump([mixed[, mixed]])<br>
                atrace()<br>
                awhich(object|string)<br>
                asynop(object|string)
                <{*<span class="adelieDebugHelp"><a href="<{$xoops_url}>/index.php/debug/help/">more…</a></span>*}></div><{*  adelieDebugHelp  *}></div><{* xhelp-content *}></div><{* xhelp-content *}></div><{* xhelp-modal *}></div><{*  xhelp-main  *}><script><{$js}></script>', '/AdelieDebug/Template/Top/Index.tpl' => '<h1>AdelieDebug XCL v2.3.1</h1>', '/AdelieDebug/Template/User/Sudo.tpl' => '<h1>Substitute User</h1><form action="" method="post"><p>Select or enter uname.</p><select name="uid"><option value=""></option><{foreach from=$users item="user"}><option value="<{$user.uid}>"><{$user.uname|escape}><{if $user.name}>(<{$user.name|escape}>)<{/if}></option><{/foreach}></select><span>uname: </span><input type="text" name="uname" size="15"><br><input type="submit" value="submit"></form><{if $nowUser}><p>Right now, you are logged in as <a href="<{$xoops_url}>/userinfo.php?uid=<{$nowUser.uid}>"><{$nowUser.uname}></a></p><{/if}>', '/AdelieDebug/TextFormat.php' => 'class AdelieDebug_TextFormat { public static function bytes($bytes, $precision = 2, array $units = null) { if ( abs($bytes) < 1024 ) { $precision = 0; } if ( is_array($units) === false ) { $units = array(\'B\', \'KB\', \'MB\', \'GB\', \'TB\', \'PB\', \'EB\', \'ZB\', \'YB\'); } if ( $bytes < 0 ) { $sign = \'-\'; $bytes = abs($bytes); } else { $sign = \'\'; } $exp = floor(log($bytes) / log(1024)); $unit = $units[$exp]; $bytes = $bytes / pow(1024, floor($exp)); $bytes = sprintf(\'%.\'.$precision.\'f\', $bytes); return $sign.$bytes.\' \'.$unit; } }', '/AdelieDebug/Theme/AdelieDebug/Main.tpl' => '<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>AdelieDebug</title></head><body><{$content}></body></html>', ); } 